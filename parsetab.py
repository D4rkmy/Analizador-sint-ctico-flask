
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASIGNAR CHAR COMILLA_DOBLE CORCHETE_DER CORCHETE_IZQ CORDER CORIZQ DISTINTO DIV DOUBLE ENTERO FLOAT FLOTANTE FOR IDENTIFICADOR IF IGUAL INT LLAVE_APERTURA LLAVE_CIERRE MAIN MAYOR_IGUAL MAYOR_QUE MENOR_IGUAL MENOR_QUE MODULO MULT NOT NUMERO OR PAR_APERTURA PAR_CIERRE PAR_DER PAR_IZQ POTENCIA PUNTO_Y_COMA RESTA RETURN SUMA UMINUS VOID WHILEinstrucciones : instrucciones instruccion\n                     | instruccioninstruccion : asignacion\n                   | condicion\n                   | cicloasignacion : IDENTIFICADOR ASIGNAR expresion PUNTO_Y_COMAcondicion : IF PAR_APERTURA expresion PAR_CIERRE instruccionesciclo : WHILE PAR_APERTURA expresion PAR_CIERRE instruccionesexpresion : IDENTIFICADOR\n                 | NUMERO\n                 | expresion SUMA expresion\n                 | expresion RESTA expresion\n                 | expresion MULT expresion\n                 | expresion DIV expresion'
    
_lr_action_items = {'IDENTIFICADOR':([0,1,2,3,4,5,9,10,11,12,18,19,20,21,22,23,24,29,30,],[6,6,-2,-3,-4,-5,-1,13,13,13,-6,13,13,13,13,6,6,6,6,]),'IF':([0,1,2,3,4,5,9,18,23,24,29,30,],[7,7,-2,-3,-4,-5,-1,-6,7,7,7,7,]),'WHILE':([0,1,2,3,4,5,9,18,23,24,29,30,],[8,8,-2,-3,-4,-5,-1,-6,8,8,8,8,]),'$end':([1,2,3,4,5,9,18,29,30,],[0,-2,-3,-4,-5,-1,-6,-7,-8,]),'ASIGNAR':([6,],[10,]),'PAR_APERTURA':([7,8,],[11,12,]),'NUMERO':([10,11,12,19,20,21,22,],[15,15,15,15,15,15,15,]),'PUNTO_Y_COMA':([13,14,15,25,26,27,28,],[-9,18,-10,-11,-12,-13,-14,]),'SUMA':([13,14,15,16,17,25,26,27,28,],[-9,19,-10,19,19,19,19,19,19,]),'RESTA':([13,14,15,16,17,25,26,27,28,],[-9,20,-10,20,20,20,20,20,20,]),'MULT':([13,14,15,16,17,25,26,27,28,],[-9,21,-10,21,21,21,21,21,21,]),'DIV':([13,14,15,16,17,25,26,27,28,],[-9,22,-10,22,22,22,22,22,22,]),'PAR_CIERRE':([13,15,16,17,25,26,27,28,],[-9,-10,23,24,-11,-12,-13,-14,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instrucciones':([0,23,24,],[1,29,30,]),'instruccion':([0,1,23,24,29,30,],[2,9,2,2,9,9,]),'asignacion':([0,1,23,24,29,30,],[3,3,3,3,3,3,]),'condicion':([0,1,23,24,29,30,],[4,4,4,4,4,4,]),'ciclo':([0,1,23,24,29,30,],[5,5,5,5,5,5,]),'expresion':([10,11,12,19,20,21,22,],[14,16,17,25,26,27,28,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> instrucciones","S'",1,None,None,None),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones','parser.py',5),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones','parser.py',6),
  ('instruccion -> asignacion','instruccion',1,'p_instruccion','parser.py',10),
  ('instruccion -> condicion','instruccion',1,'p_instruccion','parser.py',11),
  ('instruccion -> ciclo','instruccion',1,'p_instruccion','parser.py',12),
  ('asignacion -> IDENTIFICADOR ASIGNAR expresion PUNTO_Y_COMA','asignacion',4,'p_asignacion','parser.py',16),
  ('condicion -> IF PAR_APERTURA expresion PAR_CIERRE instrucciones','condicion',5,'p_condicion','parser.py',20),
  ('ciclo -> WHILE PAR_APERTURA expresion PAR_CIERRE instrucciones','ciclo',5,'p_ciclo','parser.py',24),
  ('expresion -> IDENTIFICADOR','expresion',1,'p_expresion','parser.py',28),
  ('expresion -> NUMERO','expresion',1,'p_expresion','parser.py',29),
  ('expresion -> expresion SUMA expresion','expresion',3,'p_expresion','parser.py',30),
  ('expresion -> expresion RESTA expresion','expresion',3,'p_expresion','parser.py',31),
  ('expresion -> expresion MULT expresion','expresion',3,'p_expresion','parser.py',32),
  ('expresion -> expresion DIV expresion','expresion',3,'p_expresion','parser.py',33),
]
